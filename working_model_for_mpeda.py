# -*- coding: utf-8 -*-
"""WORKING_MODEL_FOR_MPEDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10y2VmPGmKZaemMai-K0Glf6oI3Qa4A0e
"""

! pip install bardapi

import os
from bardapi import Bard
import time

os.environ['_BARD_API_KEY'] = 'eAg5N8t2fhjCedfZmokYViUKgDfVTlrtCl0ksPtcyRjeg5eVaWWs6MUpLbekngtBSfqAVA.'

Summaries = []

input_text = "Tell me name of some companies which are involved in export business of sea-foods"
answer = Bard().get_answer(input_text)['content']
summary = f"Write a summary within 40 words about {answer}"
Summaries.append(showing_results(Bard().get_answer(summary)['content']))

import re

def clean_paragraphs(answer):
    paragraphs = answer.split('\n\n')

    cleaned_paragraphs = []

    for paragraph in paragraphs:
        # Remove extra whitespaces
        cleaned_paragraph = re.sub(r'\s+', ' ', paragraph).strip()

        # Convert bullet points to a list
        cleaned_paragraph = re.sub(r'([*])\s+', r'\n\1 ', cleaned_paragraph)

        cleaned_paragraphs.append(cleaned_paragraph)

    return cleaned_paragraphs


def showing_results(answer):
  cleaned_paragraphs = clean_paragraphs(answer)

  for i, paragraph in enumerate(cleaned_paragraphs, start=1):
      print(f"\n{paragraph}\n")

showing_results(answer)

Summaries[0]

import re

def clean_seafood_text(seafood_text):
    cleaned_text = re.sub(r'\*{2,}', '', seafood_text)
    cleaned_text = re.sub(r'\[Image of [^\]]*\]', '', cleaned_text)

    cleaned_text = re.sub(r'\bbla\b.*?(\.|$)', '', cleaned_text, flags=re.DOTALL)
    cleaned_text = cleaned_text.replace('\n', '')
    return cleaned_text.strip()

distinct_words = ["seafood", "marine business", "ocean industry", "fishery",
        "fish", "shrimp", "lobster", "crab", "oyster", "mussel",
        "salmon", "tuna", "cod", "haddock", "swordfish", "octopus",
        "scallop", "squid", "anchovy", "sardine", "trout", "tilapia",
        "clam", "prawn", "mariculture", "aquaculture", "fisherman",
        "nautical", "coastal", "seashore", "harbor", "vessel", "ship",
        "navy", "sailing", "maritime", "oceanography", "seafaring",
        "seascape", "tidal", "fishing industry", "fishing boat",
        "fish market", "sea life", "marine ecology", "marine biology",
        "sea expedition", "underwater exploration", "seafood restaurant",
        "seafood cuisine", "seafood processing", "fish processing",
        "seafood trade", "seafood supply chain"]

def is_seafood_related(sentence):
    seafood_related_words = [
        "fish", "shrimp", "lobster", "crab", "prawn", "oyster", "clam", "mussel", "scallop", "squid", "octopus",
        "cuttlefish", "tuna", "salmon", "mahi-mahi", "halibut", "tilapia", "catfish", "trout", "haddock", "anchovy",
        "sardine", "herring", "mackerel", "cod", "sea bass", "snapper", "perch", "crustacean", "bivalve", "mollusk",
        "sushi", "sashimi", "ceviche", "smoked", "canned", "frozen", "fresh", "processing", "export", "import",
        "aquaculture", "fishery", "harvesting", "trawling", "sustainable", "wild-caught", "farm-raised", "mariculture",
        "seafood industry", "seafood market", "seafood trade", "seafood processing", "seafood export", "seafood import",
        "seafood distributor", "seafood supplier", "seafood restaurant", "seafood retail", "seafood packaging",
        "seafood certification", "MSC certified", "ASC certified", "seafood quality", "seafood safety",
        "seafood traceability", "seafood sustainability", "seafood regulations", "seafood inspection",
        "seafood business", "seafood company", "seafood product", "seafood supply chain", "seafood brand",
        "seafood processing plant", "seafood packaging", "seafood distribution", "seafood market trends",
        "seafood consumption", "seafood pricing", "seafood export market", "seafood import market", "seafood logistics",
        "seafood storage", "seafood handling", "seafood transportation", "seafood certifications", "seafood exhibition",
        "seafood fair", "seafood buyer", "seafood seller", "seafood trading platform", "seafood e-commerce",
        "seafood innovation", "seafood technology", "seafood sustainability", "seafood recipe", "seafood festival",
        "seafood cooking", "seafood nutrition", "seafood health benefits", "seafood culture", "seafood diversity",
        "seafood species", "seafood conservation", "seafood education", "seafood event", "seafood partnership",
        "seafood collaboration", "seafood export data", "seafood processing technology", "seafood market analysis",
        "seafood business development", "seafood promotion", "seafood investment", "seafood networking",
        "seafood trade show", "seafood industry news", "seafood sustainability initiatives", "seafood research",
        "seafood legislation", "seafood economy", "seafood certification programs", "seafood production",
        "seafood inspection", "seafood processing standards", "seafood business growth", "seafood marketing",
        "seafood branding", "seafood labeling", "seafood entrepreneurship", "seafood startups",
        "seafood investment opportunities", "seafood economic impact", "seafood employment",
        "seafood exports by country", "seafood supply and demand", "seafood value chain", "seafood market forecast",
        "seafood industry challenges", "seafood business strategies", "seafood advertising", "seafood social media",
        "seafood online presence", "seafood product innovation", "seafood packaging trends", "seafood logistics solutions",
        "seafood traceability technology", "seafood sustainability initiatives", "seafood waste reduction",
        "seafood conservation projects", "seafood education programs", "seafood industry awards",
        "seafood industry partnerships", "seafood certification bodies", "seafood safety standards",
        "seafood industry conferences", "seafood trade policies", "seafood trade agreements",
        "seafood industry collaboration", "seafood market analysis reports", "seafood industry publications",
        "seafood business consultancy", "seafood industry events", "seafood technology advancements",
        "seafood business networking", "seafood market intelligence", "seafood industry regulations",
        "seafood quality control", "seafood storage guidelines", "seafood handling practices",
        "seafood transportation regulations", "seafood export documentation", "seafood import requirements",
        "seafood market trends analysis", "seafood consumption patterns", "seafood consumer preferences",
        "seafood industry innovation", "seafood business expansion", "seafood industry investments",
        "seafood sustainability certifications", "seafood industry partnerships", "seafood industry trends",
        "seafood industry challenges", "seafood industry opportunities", "seafood industry future",
    ]
    seafood_related_words.extend(distinct_words)
    # Convert the sentence to lowercase for case-insensitive matching
    sentence_lower = sentence.lower()

    # Check if any seafood-related word is present in the sentence
    for word in seafood_related_words:
        if word in sentence_lower:
            return True

    return False

def is_nutrition_related(sentence):
  nutrition_element_keywords = [
    'nutritional value',
    'health benefits',
    'nutrient-rich',
    'vitamins',
    'minerals',
    'nutritious',
    'omega-3 fatty acids',
    'protein content',
    'healthy seafood',
    'nutritional information',
    'nutrition facts',
    'vitamin A',
    'vitamin B1',
    'vitamin B2',
    'vitamin B3',
    'vitamin B5',
    'vitamin B6',
    'vitamin B7',
    'vitamin B9',
    'vitamin B12',
    'vitamin C',
    'vitamin D',
    'vitamin E',
    'vitamin K',
    'calcium',
    'iron',
    'magnesium',
    'phosphorus',
    'potassium',
    'sodium',
    'zinc',
    'copper',
    'manganese',
    'selenium',
    'omega-3',
    'omega-6',
    'amino acids',
    'DHA',
    'EPA',
    'iodine',
    'protein',
    'fiber',
    'carbohydrates',
    'saturated fat',
    'unsaturated fat',
    'cholesterol',
    'energy',
    'calories',
    'folic acid',
    'niacin',
    'riboflavin',
    'thiamine',
    'vitamin B6',
    'vitamin B12',
    'vitamin D3',
    'vitamin K2',
    'biotin',
    'choline',
    'inositol',
    'para-aminobenzoic acid',
    'coenzyme Q10',
    'phytonadione',
    'phytosterols',
    'quercetin',
    'rutin',
    'tannins',
    'chlorophyll',
    'carotenoids',
    'lycopene',
    'lutein',
    'zeaxanthin',
    'astaxanthin',
    'beta-carotene',
    'phytoestrogens',
    'phytic acid',
    'taurine',
    'creatine',
    'carnitine',
    'glucosamine',
    'chondroitin sulfate',
    'collagen',
    'hyaluronic acid',
    'melatonin',
    'polyphenols',
    'probiotics',
    'prebiotics',
    'butyrate',
    'saponins',
    'terpenes',
    'phytochemicals',
    'resveratrol',
    'sulforaphane',
    'quercetin',
    'curcumin',
    'capsaicin',
    'phytoestrogens',
    'isoflavones',
    'flavonoids',
    'catechins',
    'ellagic acid',
    'ferulic acid',
    'indole-3-carbinol',
    'glucosinolates',
    'phytosterols',
    'saponins',
    'terpenes',
    'phytochemicals',
    'resveratrol',
    'sulforaphane',
    'quercetin',
    'curcumin',
    'capsaicin',
    'phytoestrogens',
    'isoflavones',
    'flavonoids',
    'catechins',
    'ellagic acid',
    'ferulic acid',
    'indole-3-carbinol',
    'glucosinolates',
    'phytoestrogens',
    'phytoestrogens',
    'phytoestrogens',
]
  sentence_lower = sentence.lower()

  for word in nutrition_element_keywords:
      if word in sentence_lower:
          return True

  return False

def is_location_specific(sentence):
  location_specific_seafoods_keywords = [
      'local seafood',
      'regional dishes',
      'seafood specialties',
      'location-based cuisine',
      'regional delicacies',
      'traditional dishes from',
      'seafood from',
      'local',
      'regional',
      'specialty of the region',
      'local delicacies'
  ]
  sentence_lower = sentence.lower()

  for word in location_specific_seafoods_keywords:
      if word in sentence_lower:
          return True

  return False

def is_recommendation_specific(sentence):
  recommendation_keywords = [
      'recommend dishes',
      'suggest foods',
      'dish',
      'dishes',
      'meals',
      'recommend some dishes',
      'suggest some dishes',
      'recommend',
      'suggest',
      'cuisine',
      'menu',
      'try',
      'taste',
      'favorite',
      'meal'
  ]
  sentence_lower = sentence.lower()

  for word in recommendation_keywords:
      if word in sentence_lower:
          return True

  return False

import re

def is_Language_specific(sentence):
    translation_keywords = [
        'translate', 'language', 'interpretation', 'conversion', 'linguistic',
        'multilingual', 'bilingual', 'translation service', 'translator'
    ]

    languages_for_translation = [
        'English', 'Spanish', 'French', 'German', 'Chinese', 'Japanese', 'Korean',
        'Arabic', 'Russian', 'Portuguese', 'Italian', 'Dutch', 'Turkish', 'Hindi',
        'Bengali','hindi', 'bengali', 'urdu', 'Urdu', 'Vietnamese', 'Thai', 'Indonesian', 'Greek', 'Swedish',
        'Danish', 'Norwegian', 'Finnish', 'Polish', 'Czech', 'Slovak', 'Hungarian',
        'Romanian', 'Bulgarian', 'Croatian', 'Serbian', 'Slovenian', 'Macedonian',
        'Albanian', 'Bosnian', 'Maltese'
    ]

    translation_keywords.extend(languages_for_translation)

    for word in translation_keywords:
        if word in sentence:
            return True

    return False

input_text = "Which seafood product was exported the most from India in the last 5 years?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "How can I hack the server of IIT KGP?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "I am looking for dried fish meal. Could you please share the specifications and packaging options for this product?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "What is the total export of European lobstars in the last 3 years from UK?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "What is Dynamic programming?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Provide details about Xgboost algorithm"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Can india provide sushi products?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Which seafood products could be kept in ambient temparature so that it could be shown in major international tourist spots?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "What is the availability and rate of Black Tiger fish along with areas of production?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Which airlines are operating arriving cargo flights for Live and chilled seafood products from India?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "What is the export infrastructure available  for seafood in India?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(clean_seafood_text(answer))
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(clean_seafood_text(summary))['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "What are the most important sea products exported from India in 2022-23?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

Summaries

input_text = "Recommend dishes of lobstar, I am in Canada, so do accordingly."
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Give me some information regarding nutritional values of Shark as a seafood"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Name the vitamins present in crabs"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Provide details of seafood export business of India in Hindi."
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Provide details of seafood export business of France, write in French."
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

"""**Translation Section**"""

Language = input("Enter your preferred language: ")
input_text = f"Provide details of seafood export business of France, write in {Language}."
answer = Bard().get_answer(input_text)['content']
print(answer)

Language = input("Enter your preferred language: ")
input_text = f"Can you give the details of export business of Sundarbans in 2022-2023, write in {Language}."
answer = Bard().get_answer(input_text)['content']
print(answer)

"""**Recommendation Section**"""

input_text = f"Recommend me some dishes of pomfret fish."
answer = Bard().get_answer(input_text)['content']
print(answer)

"""**Nutrition specific**"""

input_text = "Give me some information regarding nutritional values of Shark as a seafood in 100 words"
answer = Bard().get_answer(input_text)['content']
print(clean_seafood_text(answer))

"""**Local Seafood**"""

input_text = "What are local seafoods of Maldives? give me with proper tourist rating of each foods."
answer = Bard().get_answer(input_text)['content']
print(clean_seafood_text(answer))

input_text = "Which seafood product was exported the most from Bangladesh in the last 5 years?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

input_text = "Which seafood product was exported the most from England in the last 5 years?"
if is_seafood_related(input_text):
  if is_Language_specific(input_text):
    print("Please go to our translation section for this task")
  elif is_recommendation_specific(input_text):
    print("Please go to our recommendation section")
  elif is_location_specific(input_text):
    print("please go to Local seafood section")
  elif is_nutrition_related(input_text):
    print("Please go to nutrition element section")
  else:
    answer = Bard().get_answer(input_text)['content']
    print(answer)
    summary = f"Write a summary within 40 words about {answer}"
    Summaries.append(Bard().get_answer(summary)['content'])
else:
  print("This prompt is not related to seafood, give me more specifications")

Summaries

summary = "This is the overall summery of your chatting "
summary = summary + "\n"
for i in range(len(Summaries)):
    print(type(Summaries[i]))

    if Summaries[i] is not None:
        summary = summary + str(Summaries[i])

summary

import os
import ssl
import smtplib
from email.message import EmailMessage

sender = 'srinjoydas566@gmail.com'
password = 'pxer uuxr uylz xxwg'
receiver = 'saikat02004@gmail.com'
subject = 'TEST for mpeda'
body = summary
em = EmailMessage()
em['From'] = sender
em['To'] = receiver
em['Subject'] = subject
em.set_content(body)

context = ssl.create_default_context()

with smtplib.SMTP_SSL('smtp.gmail.com', port=465, context=context) as smtp:
    smtp.login(sender, password)
    smtp.sendmail(sender, receiver, em.as_string())

import os
import ssl
import smtplib
from email.message import EmailMessage

sender = 'srinjoydas566@gmail.com'
password = 'pxer uuxr uylz xxwg'
receiver = 'srinjoydas566@gmail.com'
subject = 'TEST for mpeda'
body = summary
em = EmailMessage()
em['From'] = sender
em['To'] = receiver
em['Subject'] = subject
em.set_content(body)

context = ssl.create_default_context()

with smtplib.SMTP_SSL('smtp.gmail.com', port=465, context=context) as smtp:
    smtp.login(sender, password)
    smtp.sendmail(sender, receiver, em.as_string())

